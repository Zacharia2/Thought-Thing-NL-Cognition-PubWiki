created: 20220911083225739
creator: miao
modified: 20230615115134206
modifier: WhiteFall
tags: 编程语言的特性与概念 $:/tags/Commander/Working
title: C++的特性与概念
type: text/vnd.tiddlywiki



! C++

<<<
C++难道就没有简单的方式嘛？就像tiddlywiki一样？，我觉得可以从最基础的功能圈开始，慢慢扩大知识点。对C++去繁就简，最简标准化，即使数量多也是简单。

或许，C++的难是在于适应性的表现复杂，道理并不难。正如名的绝对性与实的复杂性。名单一而实多变。

开源 C++ 库列表：https://zh.cppreference.com/mwiki/index.php?title=cpp/links/libs&variant=zh
<<<



!! ''C++ 指针''

指针是一个变量，其值为另一个变量的地址。


!! '' 函数参数''

* 传值调用	该方法把参数的实际值赋值给函数的形式参数。在这种情况下，修改函数内的形式参数对实际参数没有影响。
* 指针调用	该方法把参数的地址赋值给形式参数。在函数内，该地址用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。
* 引用调用	该方法把参数的引用赋值给形式参数。在函数内，该引用用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。

<<<
默认情况下，C++ 使用传值调用来传递参数。
<<<




!! ''C++ 结构''

结构 是 C++ 中另一种用户自定义的可用的数据类型，它允许您存储不同类型的数据项。



!! ''C++ 命名空间''

命名空间就是定义了一个范围。我们举一个计算机系统中的例子，一个文件夹(目录)中可以包含多个文件夹，每个文件夹中不能有相同的文件名，但不同文件夹中的文件可以重名。


!! ''C++ 模板''

模板是泛型编程的基础，泛型编程即以一种独立于任何特定类型的方式编写代码。

模板是创建泛型类或函数的蓝图或公式。库容器，比如迭代器和算法，都是泛型编程的例子，它们都使用了模板的概念。

每个容器都有一个单一的定义，比如 向量，我们可以定义许多不同类型的向量，比如 `vector <int> 或 vector <string>`。



!! ''C++ 预处理器''


<<<
`#include、#define、#if、#else、#line`
<<<


* ''定义宏：''`#define` 预处理指令用于创建符号常量。该符号常量通常称为宏
* ''条件编译'': #if、#else
* `#` 和 `##` 预处理运算符在 C++ 和 ANSI/ISO C 中都是可用的。`#` 运算符会把 replacement-text 令牌转换为''"replacement-text"''。## 运算符用于连接两个replacement-text
* ''预定义宏''：`__TIME__、__DATE__、__FILE__、__LINE__`


!! 其它

访问修饰符的使用，如果把类比喻成一个盒子，那么盒子内有变量和方法，你要控制它们在盒子外是否可见。比如自动化烤脆脆饼的机器（实际上是人工的，(*^▽^*)）变量在外部不可见，方法有的可见有的不可见。

!!! ''觉得 C++ 简单是种怎样的体验？ - sin1080 的回答''

虽然说C++太复杂是破乎的政治正确，但其实这事真没那么玄乎。

知道哪些东西是上古遗留的老坑、旧式做法、兼容各种已经老掉牙的编译器和平台的黑魔法，哪些炫技的东西看着酷但不好维护，哪些东西是核心思想不能丢，哪些是应该follow的发展方向，并且做合理的取舍之后，得出一个比较好用的子集并用顺溜，真没有那么难。这也本来就是生产环境里应该做的事，工程开发肯定要兼顾开发效率、执行效率和需求特性，你为了优化性能，折腾模板元编程奇技淫巧，忙活一个多月，终于省掉了开销巨大的虚函数调用，编译期做了好多牛逼的预计算，把1000ms的事优化到了999.98ms，从此整个项目维护起来出点编译错误就看得头大，让新手来接手，光看代码就难上天。厉害吧，厉害么？厉害个球啊是不是。

想让C++用起来觉得简单点，首先就应该做减法，选出一个合适的子集，而不是先花费大量时间试图精通C++从80年代历史烂摊子到模板元编程黑魔法一整套，等到真开始做实事了又在项目里时而new出来裸指针满天飞，时而模板花式炫技，过会再来一坨谜一般的宏。C++本身复杂，不代表你用了它就要把简单的事情做复杂。想清楚一件事情：问题的内在复杂性是恒定的，相对于问题的难度，解决方式做得越复杂、代码越不可读不好维护，说明写代码的人越鶸。



!!! ''觉得 C++ 简单是种怎样的体验？ - 黄亮anthony 的回答''

我不认为C++简单，但是我知道感觉C++简单是什么样，所以这个并不算是强答。

''有两个阶段会认为C++简单：''

初学者阶段。如果你拿了一本好书，那么学C++是就会感觉它很简单。用好int/string/stl就好了，就算要写了一点比较直观的模板也没有问题。好书就是少讲构造函数和复制构造函数的调用关系，少讲前++和后++，讲清楚类型，值，函数，如何用类和模板以及命名空间把它们组织起来。

2. 懂得读标准文档阶段。C++是讲道理的，很多复杂性是因为使用者不讲道理。当你会读标准文档时，你可以用比较讲道理（C++）的方式解决问题。UB也是有文档定义的，就算编译器有bug，我也知道应该如何处理，一切都是那么有序（标准规范）

但是从1到2之间有很长的一段时间，会被C++各用特性搅得头晕，被摧残。这种情况下程序员分成两类，一是向读标准文档进发，不小心变成语言律师了；二是向C进发，推荐C-with-class，甚至直接进化成纯C派程序员。

如果想正常的到达2这个阶段，在只在C++中是不行，你得跳出这个圈子，看看其它语言解决了哪些问题，如何解决，回过头来看C++如何处理更合理。C++标准委员当然有它自己问题，但不可否认成员的见识和解决问题的能力是相当强，C++标准中有些道理比其它社区中的考虑要深刻的多。

走过2的同志，大约会同意我的观点：C++程序本质上复杂，但可以表现的很简单。复杂的原因是C++的抽象基础太低，抽象层次太多。表现得很简单是因为C++是一门表现力非常强的语言。

比如C++17之后，这行代码把复杂的本质表达得非常简单


```c
std::arraysome{"a","b","c"}；
```

