[
    {
        "title": "$:/plugins/whitefall/obsidian-manager",
        "type": "application/json",
        "text": "{\"tiddlers\":{\"C:\\\\Users\\\\Snowy\\\\Documents\\\\GitHub\\\\tidgi-obsidian-manager\\\\src\\\\obsidian-manager\\\\async-global-variables.ts\":{\"title\":\"C:\\\\Users\\\\Snowy\\\\Documents\\\\GitHub\\\\tidgi-obsidian-manager\\\\src\\\\obsidian-manager\\\\async-global-variables.ts\",\"text\":\"class asyncGV {\\r\\n    constructor() {\\r\\n        this.ready = false;\\r\\n        this.storage = {};\\r\\n    }\\r\\n    //静态方法\\r\\n    static getInstance() {\\r\\n        if (!this.instance) {\\r\\n            this.instance = new asyncGV();\\r\\n        }\\r\\n        return this.instance;\\r\\n    }\\r\\n\\r\\n    // 在各个异步模块之间同步数据。\\r\\n    resolve(storage: {}) {\\r\\n        this.storage = storage;\\r\\n        if (this.storage) {\\r\\n            this.ready = true;\\r\\n        }\\r\\n        console.log(this.storage)\\r\\n    }\\r\\n\\r\\n    state() {\\r\\n        return this.ready;\\r\\n    }\\r\\n\\r\\n    getData() {\\r\\n        if (this.ready) {\\r\\n            return this.storage;\\r\\n        } else {\\r\\n            console.log(\\\"还未准备好\\\");\\r\\n            return this.ready;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // 对获取到的storage进行传操作。\\r\\n    pushV(k: any, v: any) {\\r\\n        this.storage[k] = v;\\r\\n    }\\r\\n\\r\\n    getK(k: any) {\\r\\n        return this.storage[k];\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\nexport { asyncGV }\",\"type\":\".ts\"},\"C:\\\\Users\\\\Snowy\\\\Documents\\\\GitHub\\\\tidgi-obsidian-manager\\\\src\\\\obsidian-manager\\\\browser-background-sync.ts\":{\"title\":\"C:\\\\Users\\\\Snowy\\\\Documents\\\\GitHub\\\\tidgi-obsidian-manager\\\\src\\\\obsidian-manager\\\\browser-background-sync.ts\",\"text\":\"/* eslint-disable unicorn/no-array-callback-reference */\\nimport type { Tiddler, IServerStatus, ITiddlerFieldsParam } from 'tiddlywiki';\\nimport mapValues from 'lodash/mapValues';\\nimport cloneDeep from 'lodash/cloneDeep';\\nimport { asyncGV } from './async-global-variables'\\n\\nclass BackgroundSyncManager {\\n\\n    constructor() {\\n        // TODO: get this from setting\\n        this.setupListener();\\n        this.GV = asyncGV.getInstance();\\n    }\\n\\n    setupListener() {\\n        $tw.rootWidget.addEventListener('tw-obsidian-add', async (event) => {\\n            if (event.type === \\\"tw-obsidian-add\\\") {\\n                // const params = $tw.wiki.getTiddlerData(event.paramTiddler, {});\\n                this.GV.resolve(await this.fetchData(event.param));\\n                console.log(\\\"获取完成\\\");\\n\\n                // 其实点几次都可以，只有一次有效。\\n                this.addObsidian(this.GV.getData());\\n            }\\n        });\\n        $tw.rootWidget.addEventListener('tw-obsidian-purge', async (event) => {\\n            this.purgeStore();\\n        });\\n        $tw.rootWidget.addEventListener('tw-obsidian-update', async (event) => {\\n\\n        });\\n    }\\n\\n    async start(skipStatusCheck?: boolean) {\\n\\n    }\\n\\n    async wiki_markdown_syntax(content) {\\n        // 替换掉图片语法为[img[]]。\\n        let c_o_img = content.replace(/\\\\!\\\\[\\\\[(.*?)\\\\]\\\\]/g, \\\"[img[$1]]\\\");\\n        let c_md_img = c_o_img.replace(/\\\\!\\\\[(.*?)\\\\]\\\\((.*?)\\\\)/g, \\\"[img[$2]]\\\");\\n        // 匹配这个语法,以后再说吧.\\n        //  ![[xx.jpg|400]] => [img[Description of image|TiddlerTitle]]\\n        return c_md_img\\n    }\\n\\n    async addObsidian(obDate: {}) {\\n        // 加入提示，消息。\\n        // console.log(\\\"创建条目：\\\");\\n        // 应该是每创建一个条目，写入一条记录。到时候删除也是从记录里面删除。\\n        // 或者，就是route里面的list，我将创建他们。所以我将删除他们。\\n        let written_list = [];\\n        for (const key in obDate.md) {\\n            let text  = await this.wiki_markdown_syntax(obDate.md[key]);\\n            let title = key.split(\\\".\\\")[0];\\n            $tw.wiki.addTiddler(\\n                new $tw.Tiddler({\\n                    title: title,\\n                    type: \\\"text/markdown\\\",\\n                    text: text\\n                }));\\n            written_list.push(title);\\n            // console.log(\\\"创建条目：\\\" + title);\\n            $tw.rootWidget.dispatchEvent({ type: 'tw-obsidian-log', param: \\\"创建条目：\\\" + title })\\n        }\\n        for (const fileName in obDate.image) {\\n            let type = \\\"image/\\\" + fileName.substring(fileName.lastIndexOf(\\\".\\\") + 1)\\n            $tw.wiki.addTiddler(\\n                new $tw.Tiddler({\\n                    title: fileName,\\n                    type: type,\\n                    text: obDate.image[fileName]\\n                }));\\n            written_list.push(fileName);\\n            console.log(\\\"创建图片条目：\\\" + fileName);\\n        }\\n        written_list.push(\\\"$:/plugins/whitefall/obsidian-manager/records-written-to-tiddlers\\\");\\n        $tw.wiki.addTiddler(\\n            new $tw.Tiddler({\\n                title: \\\"$:/plugins/whitefall/obsidian-manager/records-written-to-tiddlers\\\",\\n                text: JSON.stringify(written_list)\\n            }));\\n    }\\n\\n    async purgeStore() {\\n        let tiddler_list = JSON.parse($tw.wiki.getTiddlerText(\\\"$:/plugins/whitefall/obsidian-manager/records-written-to-tiddlers\\\"));\\n        tiddler_list.forEach(title => {\\n            console.log(\\\"删除条目：\\\" + title);\\n            $tw.wiki.deleteTiddler(title);\\n        });\\n    }\\n\\n    async fetchData(route: string) {\\n        console.log(\\\"获取数据:\\\" + route)\\n        const response = await fetch(route);\\n        const data = await response.json();\\n        return data;\\n    }\\n}\\n\\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\\nexport { BackgroundSyncManager }\",\"type\":\".ts\"},\"C:\\\\Users\\\\Snowy\\\\Documents\\\\GitHub\\\\tidgi-obsidian-manager\\\\src\\\\obsidian-manager\\\\index.css\":{\"title\":\"C:\\\\Users\\\\Snowy\\\\Documents\\\\GitHub\\\\tidgi-obsidian-manager\\\\src\\\\obsidian-manager\\\\index.css\",\"text\":\"body {\\r\\n    background: cyan;\\r\\n}\"},\"$:/plugins/whitefall/obsidian-manager/Panel\":{\"title\":\"$:/plugins/whitefall/obsidian-manager/Panel\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$obm/>\"},\"$:/plugins/whitefall/obsidian-manager/readme\":{\"title\":\"$:/plugins/whitefall/obsidian-manager/readme\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"! tw5-obsidian-manager\\n\\n备忘录：\\n\\n```\\n添加，更新，清空\\naddTiddler，`$tw.wiki.deleteTiddler(title)`;\\nhttps://github.com/Jermolene/TiddlyWiki5/blob/9b59dff275e996ea5fa602912e2ff670d50e5b89/plugins/tiddlywiki/dynaview/dynaview.js#L150\\n`$tw.wiki.getTiddlerText(title)`：返回标题为title的Tiddler的文本内容。\\n`$tw.wiki.getTiddlerData(title)`：返回标题为title的Tiddler的JSON格式数据。可以通过该API获取Tiddler的所有属性和字段。\\n\\nTypeScript 中使用 CSS Modules：https://juejin.cn/post/6844903497532473352\\n```\"},\"$:/plugins/whitefall/obsidian-manager/router/get-obstore.js\":{\"title\":\"$:/plugins/whitefall/obsidian-manager/router/get-obstore.js\",\"text\":\"!function(){\\\"use strict\\\";exports.method=\\\"GET\\\",exports.path=/^\\\\/obstore\\\\/(.+)$/,exports.handler=function(e,n,t){var i,r,a,o,s=require(\\\"path\\\"),d=require(\\\"fs\\\"),c=(require(\\\"util\\\"),$tw.utils.decodeURIComponentSafe(t.params[0])),p=function(e,n){var n=n||[\\\".git\\\",\\\".obsidian\\\"],t=[];for(const r of d.readdirSync(e)){var i=s.join(e,r);d.statSync(i).isFile()?t.push(i):n.includes(r)||(i=p(i),t=t.concat(i))}return t},c=p(c,[\\\".git\\\",\\\".obsidian\\\",\\\"绘图\\\"]),c=(o={md:{},image:{}},c.forEach(e=>{r=s.basename(e),a=s.extname(r),-1!==[\\\".jpg\\\",\\\".jpeg\\\",\\\".png\\\"].indexOf(a)?(i=d.readFileSync(e),o.image[r]=i.toString(\\\"base64\\\")):\\\".md\\\"===a&&(i=d.readFileSync(e,\\\"utf8\\\"),o.md[r]=i)}),o),c=JSON.stringify(c);t.sendResponse(200,{\\\"Content-Type\\\":\\\"application/json\\\"},c)}}();\",\"type\":\"application/javascript\",\"module-type\":\"route\"},\"$:/plugins/whitefall/obsidian-manager/obsidian-main.js\":{\"title\":\"$:/plugins/whitefall/obsidian-manager/obsidian-main.js\",\"type\":\"application/javascript\",\"module-type\":\"widget\",\"Modern.TiddlyDev#Origin\":\"obsidian-main.ts\",\"text\":\"\\\"use strict\\\";var import_widget=require(\\\"$:/core/modules/widgets/widget.js\\\"),asyncGV=class{constructor(){this.ready=!1,this.storage={}}static getInstance(){return this.instance||(this.instance=new asyncGV),this.instance}resolve(t){this.storage=t,this.storage&&(this.ready=!0),console.log(this.storage)}state(){return this.ready}getData(){return this.ready?this.storage:(console.log(\\\"还未准备好\\\"),this.ready)}pushV(t,e){this.storage[t]=e}getK(t){return this.storage[t]}},BackgroundSyncManager=class{constructor(){this.setupListener(),this.GV=asyncGV.getInstance()}setupListener(){$tw.rootWidget.addEventListener(\\\"tw-obsidian-add\\\",async t=>{\\\"tw-obsidian-add\\\"===t.type&&(this.GV.resolve(await this.fetchData(t.param)),console.log(\\\"获取完成\\\"),this.addObsidian(this.GV.getData()))}),$tw.rootWidget.addEventListener(\\\"tw-obsidian-purge\\\",async t=>{this.purgeStore()}),$tw.rootWidget.addEventListener(\\\"tw-obsidian-update\\\",async t=>{})}async start(t){}async wiki_markdown_syntax(t){return t.replace(/\\\\!\\\\[\\\\[(.*?)\\\\]\\\\]/g,\\\"[img[$1]]\\\").replace(/\\\\!\\\\[(.*?)\\\\]\\\\((.*?)\\\\)/g,\\\"[img[$2]]\\\")}async addObsidian(t){var e=[];for(const n in t.md){var i=await this.wiki_markdown_syntax(t.md[n]),a=n.split(\\\".\\\")[0];$tw.wiki.addTiddler(new $tw.Tiddler({title:a,type:\\\"text/markdown\\\",text:i})),e.push(a),$tw.rootWidget.dispatchEvent({type:\\\"tw-obsidian-log\\\",param:\\\"创建条目：\\\"+a})}for(const d in t.image){var s=\\\"image/\\\"+d.substring(d.lastIndexOf(\\\".\\\")+1);$tw.wiki.addTiddler(new $tw.Tiddler({title:d,type:s,text:t.image[d]})),e.push(d),console.log(\\\"创建图片条目：\\\"+d)}e.push(\\\"$:/plugins/whitefall/obsidian-manager/records-written-to-tiddlers\\\"),$tw.wiki.addTiddler(new $tw.Tiddler({title:\\\"$:/plugins/whitefall/obsidian-manager/records-written-to-tiddlers\\\",text:JSON.stringify(e)}))}async purgeStore(){JSON.parse($tw.wiki.getTiddlerText(\\\"$:/plugins/whitefall/obsidian-manager/records-written-to-tiddlers\\\")).forEach(t=>{console.log(\\\"删除条目：\\\"+t),$tw.wiki.deleteTiddler(t)})}async fetchData(t){return console.log(\\\"获取数据:\\\"+t),await(await fetch(t)).json()}},ObMainWidget=class extends import_widget.widget{refresh(t){return!1}async render(t,e){this.parentDomNode=t,this.execute(),new BackgroundSyncManager,$tw.rootWidget.addEventListener(\\\"tw-obsidian-log\\\",async t=>{console.log(t.param)});var i=$tw.utils.domMaker(\\\"div\\\",{\\\"class\\\":\\\"ob-main-widget\\\"}),a=$tw.utils.domMaker(\\\"button\\\",{\\\"class\\\":\\\"ob-main-widget-button\\\",text:\\\"Add\\\",title:\\\"点击添加OB库\\\"}),s=$tw.utils.domMaker(\\\"button\\\",{\\\"class\\\":\\\"ob-main-widget-button\\\",text:\\\"purge\\\",title:\\\"点击清空已添加的OB库\\\"}),n=$tw.utils.domMaker(\\\"label\\\",{\\\"class\\\":\\\"ob-main-widget-input-label\\\",\\\"for\\\":\\\"path\\\",text:\\\"文件夹路径: \\\"});const d=$tw.utils.domMaker(\\\"input\\\",{\\\"class\\\":\\\"ob-main-widget-input\\\",type:\\\"text\\\",id:\\\"path\\\",name:\\\"path\\\",placeholder:\\\"请输入路径。\\\"});a.onclick=function(){var t;0==d.value.length?console.log(\\\"输入为空！\\\"):(t=\\\"/obstore/\\\"+d.value,$tw.rootWidget.dispatchEvent({type:\\\"tw-obsidian-add\\\",param:t}))},s.onclick=function(){$tw.rootWidget.dispatchEvent({type:\\\"tw-obsidian-purge\\\"})},i.appendChild(n),i.appendChild(d),i.appendChild(a),i.appendChild(s),this.domNodes.push(t.appendChild(i))}};exports.obm=ObMainWidget;\"},\"$:\\\\plugins\\\\whitefall\\\\obsidian-manager\\\\obsidian-main.css\":{\"title\":\"$:\\\\plugins\\\\whitefall\\\\obsidian-manager\\\\obsidian-main.css\",\"tags\":[\"$:/tags/Stylesheet\"],\"type\":\"text/css\",\"Modern.TiddlyDev#Origin\":\"..\\\\..\\\\temp_stylePlugin:ni:sha-256;ubr0hwtQwJII4gO6Dwcrkx9woXHSMnoaNA3nXBxJplI\",\"text\":\"body{background:#0ff}\"}}}",
        "name": "obsidian-manager",
        "author": "whitefall",
        "description": "导入并管理你的Obsidian存储库",
        "plugin-type": "plugin",
        "version": "0.0.1",
        "list": "Panel readme",
        "dependents": "",
        "Modern.TiddlyDev#SHA256-Hashed": "6740e76ac1cf7381b18afdce705aae68a177eaed8ebc337790b334ba8c6b5fdb"
    }
]